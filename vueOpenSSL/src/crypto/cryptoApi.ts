declare module "openssl-crypto"{
    export namespace kdf{
        export function pbkdf2(password: string, salt: string, iterations: number, keyLength: number, hashAlgorithm: string): string;
    }

    export namespace Sm2{
        export enum constants {
        C1C2C3,
        C1C3C2,
        /** 未压缩 */
        PC = '04'
        }
        export interface Options {
            /** 
             * Concatenation mode
             * @default SM2.constants.C1C3C2
             *  */
            mode?: constants;
            /** 
             * The encoding of the plain data string,if `data` is not a string then `inputEncoding` is ignored.
             * @default "utf8"
             */
            inputEncoding?: BufferEncoding;
            /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
            outputEncoding: BufferEncoding;
        }

        // key is hex string 
        export function generateKeyPair(): {
            privateKey: string;
            publicKey: string;
        };

        /** 
         * sign data 
         * @param data Plain message, data 都是原始数据，不是预处理的数据， 内部会对数据进行预处理
         * @param key privateKey key generated by SM2.generateKeyPair()  hex string,
         * @param userId userId 可以为 null, 内部有默认值
         * @param options sign options
         * */
        export function sign(data: string | ArrayBuffer | Buffer, privateKey: string, userId: string, options?: Options): string;
        export function sign(data: string | ArrayBuffer | Buffer, privateKey: string, userId: string, options?: Omit<Options, "outputEncoding">): ArrayBuffer;

        /** 
         * sign data 
         * @param data Plain message, data 都是原始数据，不是预处理的数据， 内部会对数据进行预处理
         * @param key Public key generated by SM2.generateKeyPair()  hex string,
         * @param userId userId 可以为 null, 内部有默认值
         * @param options sign options
         * */
        export function verify(data: string | ArrayBuffer | Buffer, publicKey: string, userId: string, signature: string): boolean;

        /** 
         * Encrypt data 
         * @param data Plain message
         * @param key Public key generated by SM2.generateKeyPair()
         * @param options encrypt options
         * */
        export function encrypt(data: string | ArrayBuffer | Buffer, key: string, options?: Options): string;
        export function encrypt(data: string | ArrayBuffer | Buffer, key: string, options?: Omit<Options, "outputEncoding">): ArrayBuffer;
        /** 
         * Decrypt data 
         * @param data Ciphered data
         * @param key Public key generated by SM2.generateKeyPair()
         * @param options 
         * */
        export function decrypt(data: string | ArrayBuffer | Buffer, key: string, options?: Options): string;
        export function decrypt(data: string | ArrayBuffer | Buffer, key: string, options?: Omit<Options, "outputEncoding">): ArrayBuffer;
    }

    export namespace Symm{
        export interface EncryptOptions {
            /**
             * Initialization vector(any string of 32 hexadecimal digits)
             */
            iv?: string;
            /**
             * The encoding of the plain data string,if data is not a string then inputEncoding is ignored.
             * @default "utf8"
             */
            inputEncoding?: BufferEncoding;
            /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
            outputEncoding: BufferEncoding;
        }

        export interface DecryptOptions {
            /**
             * Initialization vector(any string of 32 hexadecimal digits)
             */
            iv?: string;
            /**
             * The encoding of the plain data string,if data is not a string then inputEncoding is ignored.
             */
            inputEncoding?: BufferEncoding;
            /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
            outputEncoding: BufferEncoding;
        }

        export function symmEncrypt(type: number, key: string, data: string | ArrayBuffer | Buffer, options?: EncryptOptions): string;
        export function symmEncrypt(type: number, key: string, data: string | ArrayBuffer | Buffer, options?: Omit<EncryptOptions, "outputEncoding">): ArrayBuffer;
        export function symmDecrypt(type: number, key: string, data: string | ArrayBuffer | Buffer, options?: EncryptOptions): string;
        export function symmDecrypt(type: number, key: string, data: string | ArrayBuffer | Buffer, options?: Omit<DecryptOptions, "outputEncoding">): ArrayBuffer;

        export interface GcmEncryptOptions {
            additionData?: string | ArrayBuffer | Buffer;
            /**
             * The encoding of the plain data string,if data is not a string then inputEncoding is ignored.
             * @default "utf8"
             */
            inputEncoding?: BufferEncoding;
            /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
            outputEncoding: BufferEncoding;
        }

        export interface GcmDecryptOptions {
            additionData?: string | ArrayBuffer | Buffer;
            /**
             * The encoding of the plain data string,if data is not a string then inputEncoding is ignored.
             */
            inputEncoding?: BufferEncoding;
            /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
            outputEncoding: BufferEncoding;
        }

        export interface GcmEncryptResult {
            cipher: string;
            tag: string;
        }

        export function sm4gcmEncrypt(plain: string | ArrayBuffer | Buffer, key: string, iv: string, options?: GcmEncryptOptions): GcmEncryptResult;
        export function sm4gcmDecrypt(cipher: string | ArrayBuffer | Buffer, key: string, iv: string, tag: string, options?: GcmDecryptOptions): string;
        export function sm4gcmDecrypt(cipher: string | ArrayBuffer | Buffer, key: string, iv: string, tag: string, options?: Omit<GcmDecryptOptions, "outputEncoding">): ArrayBuffer;
    }

    export namespace Hash{
        /**
         * Calculates the digest.
         * @param data Data message
         * @param inputEncoding The encoding of the data string, if data is not a string then inputEncoding is ignored.Default is "utf8"
         * @param outputEncoding If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned.
         */
        export function digest(type: number, data: string | ArrayBuffer | Buffer, inputEncoding: string, outputEncoding: BufferEncoding): string;
        export function digest(type: number, data: string | ArrayBuffer | Buffer, inputEncoding?: BufferEncoding): ArrayBuffer;
    }

    export namespace Hmac{
        /**
         * Calculates the digest.
         * @param data Data message
         * @param inputEncoding The encoding of the data string, if data is not a string then inputEncoding is ignored.Default is "utf8"
         * @param outputEncoding If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned.
         */
        export function hamc(type: number, key: string, data: string | ArrayBuffer | Buffer, inputEncoding: string, outputEncoding: BufferEncoding): string;
        export function hmac(type: number, key: string, data: string | ArrayBuffer | Buffer, inputEncoding?: BufferEncoding): ArrayBuffer;
    }
}




